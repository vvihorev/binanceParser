#!/usr/bin/python
import sys
import time
import re
from typing import NamedTuple

from selenium.webdriver import Firefox
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions
from selenium.common.exceptions import NoSuchElementException
from loguru import logger


logger.add('logfile', format="{time:YYYY-MM-DD HH:mm:ss} | {message}", colorize=True)


class CLIArgs(NamedTuple):
    url: str
    amount: str


def explicit_wait(driver: Firefox) -> None:
    try:
        WebDriverWait(driver, 10).until(
            expected_conditions.presence_of_all_elements_located((By.CLASS_NAME, "css-1ee59nr"))
        )
    finally:
        return


def parse_cli_arguments() -> CLIArgs:
    """Parse arguments. Example: binanceParser USDT CNY buy ALL 900"""
    try:
        active, fiat, operation, payment, amount = sys.argv[1:]
    except ValueError:
        print('Usage: parseBinance <active> <fiat> <operation> <payment> <amount>')
        exit()
    if operation == "buy":
        operation = "all-payments"
    url = f"https://p2p.binance.com/ru/trade/{operation}/{active}?fiat={fiat}&payment={payment}"
    return CLIArgs(url, amount)


def accessWebpage(url: str) -> Firefox:
    """Access the binance webpage"""
    logger.info("Starting parsing. Firing up the browser")
    driver = Firefox()
    driver.get(url)
    explicit_wait(driver)
    logger.info("Page loaded")
    return driver


def close_pop_ups(driver: Firefox) -> None:
    """Close pop-ups with 'OK' and with 'X', if any."""
    time.sleep(3)
    buttons = driver.find_elements(By.XPATH, '//button')
    if buttons:
        for b in buttons:
            if 'ОК' in b.text:
                b.click()
        logger.info("Pop-ups closed with 'OK'")
        time.sleep(1)
    cross_popup = driver.find_element(By.CLASS_NAME, "css-1pcqseb")
    if cross_popup:
        cross_popup.click()
        logger.info("Pop-ups closed with 'X'")


def input_search_amount(driver: Firefox, amount: str) -> None:
    """Input the search amount."""
    input_field = driver.find_element(By.ID, 'C2Csearchamount_searchbox_amount')
    if input_field:
        input_field.send_keys(str(amount))
        input_field.send_keys(Keys.ENTER)
        explicit_wait(driver)
        logger.info("Provided the search amount")
    else:
        logger.info("Amount input field not found")


def get_page_elements(driver: Firefox, page_number: int = 0) -> list[str]:
    """Gets target elements from a page."""
    page_elems = driver.find_elements(By.CLASS_NAME, 'css-ovjtyv')
    result = [';'.join(elem.text.split('\n')) for elem in page_elems]
    logger.info(f"Got {len(page_elems)} elements from page {page_number + 1}")
    return result


def iterate_over_pages(driver: Firefox) -> list[str]:
    """Gets elements from each accessible page."""
    try:
        pages = driver.find_element(By.CLASS_NAME, 'css-b0tuh4')
    except NoSuchElementException:
        logger.info(f"No elements found for given parameters. Stopping the script.")
        exit()
    n_pages = int(pages.text.split()[-1])
    logger.info(f"Found {n_pages} pages in total.")
    # Get first page elements.
    all_elements = get_page_elements(driver)
    for page_number in range(1, n_pages):
        # Press button to go to next page.
        driver.find_elements(By.CLASS_NAME, 'css-1iztezc')[-1].click()
        logger.info(f"Going to page {page_number + 1}")
        explicit_wait(driver)
        all_elements += get_page_elements(driver, page_number)
    return all_elements


def main():
    args = parse_cli_arguments()
    driver = accessWebpage(args.url)
    close_pop_ups(driver)
    input_search_amount(driver, args.amount)
    all_elements = iterate_over_pages(driver)
    driver.close()

    logger.info(f"Parsing completed. Found {len(all_elements)} elements in total.")
    with open('results', 'w') as file:
        file.write('\n'.join(all_elements))


if __name__ == "__main__":
    main()

